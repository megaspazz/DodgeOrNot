@{
    ViewBag.Title = "Home Page";
}

<div>
	<h2>Chat</h2>
	<textarea id="txtChat" cols="64" rows="8" wrap="off" style="overflow: scroll"></textarea><br />
	<button id="btnParseChat" type="button">Parse Chat</button>
</div>
<div>
	<h2>Info</h2>
	<div>
		Region:
		<select id="selRegion">
			<option value="na">NA</option>
			<option value="euw">EUW</option>
			<option value="lan">LAN</option>
			<option value="oce">OCE</option>
		</select>
	</div>
	Recent Games: <input id="numGames" type="number" min="1" max="40" value="20" onkeypress="submitKeyPress(event);" />
</div>
<div>
	<h2>Players</h2>
	Player 1: <input id="txtP1" onkeypress="submitKeyPress(event);" /><br />
	Player 2: <input id="txtP2" onkeypress="submitKeyPress(event);" /><br />
	Player 3: <input id="txtP3" onkeypress="submitKeyPress(event);" /><br />
	Player 4: <input id="txtP4" onkeypress="submitKeyPress(event);" /><br />
	Player 5: <input id="txtP5" onkeypress="submitKeyPress(event);" /><br />
	<button id="btnSubmit" type="button" onclick="submitSummoners();">Submit</button>
	<button id="btnClear" type="button" onclick="clearSummoners();">Clear</button>
</div>
<div>
    <h2>Results</h2>
    <table id="tblResults">
        <colgroup>
            <col width="160" />
            <col width="240" />
            <col width="160" />
            <col width="200" />
        </colgroup>
        <tr>
            <th>Summoner</th>
            <th>KDA Ratio</th>
            <th>Participation</th>
            <th>Win Rate</th>
        </tr>
    </table>
</div>

<script>
    var waitResponses = 0;

	$("#btnParseChat").click(function ()
	{
		var playerBoxes = getPlayerBoxes();
		for (var i = 0; i < playerBoxes.length; i++)
		{
			playerBoxes[i].value = "";
		}

		var chat = document.getElementById("txtChat").value;
		var lines = chat.split("\n");
		var players = {};
		for (var i = 0; i < lines.length; i++)
		{
			var idxColon = lines[i].indexOf(": ");
			var idxJoin = lines[i].indexOf(" joined the room");
			if (idxColon >= 0)
			{
			    var raw = lines[i].substring(0, idxColon);
			    var lastChar = raw.slice(-1);
			    var p = raw.trim();
                if (lastChar != " ") {
                    var lastSpace = p.lastIndexOf(" ");
                    p = p.substring(0, lastSpace);
			    }
				players[p] = true;
			} else if (idxJoin >= 0)
			{
				var p = lines[i].substring(0, idxJoin);
				players[p] = true;
			}
		}

		var idx = 0;
		for (var p in players)
		{
			if (idx >= 5)
			{
				break;
			}
			playerBoxes[idx++].value = p;
		}
	});

	function submitKeyPress(e)
	{
	    var code = e.keyCode || e.which;
	    if (code == 13)
	    {
	        submitSummoners();
	    }
	}

    function submitSummoners()
    {
        if (waitResponses > 0)
        {
            // TODO: better way to show error messages
            alert("ERROR:  Currently processing previous submission.  Please be patient, especially if you chose to load a lot of games.  If it's already been a really long time, refresh the page and try again.");
            return;
        }

        var playerBoxes = getPlayerBoxes();
        var names = playerBoxes.map(function (txtBox)
        {
            return txtBox.value;
        }).filter(function (txt)
        {
            return txt;
        }).join();
        var reg = $("#selRegion").val();

        var url = "@Url.Action("GetInfo", "Summoner")";
        var args = {
            region: reg,
            summonerNames: names
        };

        waitResponses = names.length;
        $.getJSON(url, args, function (data)
        {
            // Remove all rows in the results table except the first header row
            $("#tblResults").find("tr:gt(0)").remove();

            var tblResults = document.getElementById("tblResults");
            var summResults = [];
            for (var i = 0; i < data.length; i++)
            {
                var jsObj = JSON.parse(data[i].RawJSON);
                var tr = document.createElement("tr");
                var tdName = document.createElement("td");
                var summName = jsObj.name;
                var aName = document.createElement("a");
                aName.setAttribute("href", "http://na.op.gg/summoner/userName=" + encodeURIComponent(summName));
                aName.innerHTML = summName;
                tdName.appendChild(aName);
                tr.appendChild(tdName);
                tr.style.height = "48px";    // TODO: set height with CSS when you figure out why table CSS isn't working
                tblResults.appendChild(tr);
                summResults[i] = {
                    id: jsObj.id,
                    name: jsObj.name,
                    node: tr
                };
            }
            loadMatchData(summResults);
        });
    }

	function loadMatchData(summResults)
	{
	    waitResponses = summResults.length;

		var reg = $("#selRegion").val();
		var games = $("#numGames").val();
        
		var url = "@Url.Action("GetResults", "Match")";
		for (var i = 0; i < summResults.length; i++)
		{
			var args = {
				region: reg,
				summonerID: summResults[i].id,
				matchType: "TEAM_BUILDER_DRAFT_RANKED_5x5",
				beginIndex: 0,
				endIndex: games
			};

            // Need to create a closure to preserve the value of the iterator in the callback
			$.getJSON(url, args, createLoopCallback(i, function (data, index)
			{
				var tdKDA = document.createElement("td");
				var tdPart = document.createElement("td");
				var tdWin = document.createElement("td");

				var res = computeResults(data);

				tdKDA.appendChild(createIcon(res.kda, 1.5, 4.0));
				tdKDA.appendChild(createIcon(res.kda, 2.0, 3.0));
				tdKDA.appendChild(createSpan(res.average.kills.toFixed(1) + " / " + res.average.deaths.toFixed(1) + " / " + res.average.assists.toFixed(1) + " (" + res.kda.toFixed(2) + ")"));

				tdPart.appendChild(createIcon(res.average.participation, 0.40, 0.60));
				tdPart.appendChild(createIcon(res.average.participation, 0.45, 0.55));
				tdPart.appendChild(createSpan((100 * res.average.participation).toFixed(2) + "%"));

				tdWin.appendChild(createIcon(res.winRate, 0.30, 0.70));
				tdWin.appendChild(createIcon(res.winRate, 0.40, 0.60));
				tdWin.appendChild(createSpan((100 * res.winRate).toFixed(2) + "% (" + res.total.wins + "W-" + res.total.losses + "L)"));

				summResults[index].node.appendChild(tdKDA);
				summResults[index].node.appendChild(tdPart);
				summResults[index].node.appendChild(tdWin);

				waitResponses--;
			}));
		}
	}

	function createLoopCallback(index, func)
	{
	    return function (data)
	    {
	        func(data, index);
	    }
	}

	function clearSummoners()
	{
		var playerBoxes = getPlayerBoxes();
		for (var i = 0; i < playerBoxes.length; i++)
		{
			playerBoxes[i].value = "";
		}
	}

	function getPlayerBoxes()
	{
		return [
			document.getElementById("txtP1"),
			document.getElementById("txtP2"),
			document.getElementById("txtP3"),
			document.getElementById("txtP4"),
			document.getElementById("txtP5")
		];
	}

	function computeResults(results) {
	    var games = results.length;
	    var totalKills = 0;
	    var totalDeaths = 0;
	    var totalAssists = 0;
	    var totalParticipation = 0;
	    var totalVictories = 0;
	    for (var i = 0; i < results.length; i++) {
	        var res = results[i];
	        totalKills += res.Kills;
	        totalDeaths += res.Deaths;
	        totalAssists += res.Assists;
	        totalParticipation += res.Participation;
	        totalVictories += res.Victory;
	    }
	    return {
	        kda: (totalKills + totalAssists) / totalDeaths,
	        winRate: totalVictories / games,
	        total: {
	            kills: totalKills,
	            deaths: totalDeaths,
	            assists: totalAssists,
	            wins: totalVictories,
                losses: games - totalVictories
	        },
	        average: {
	            kills: totalKills / games,
	            deaths: totalDeaths / games,
	            assists: totalAssists / games,
	            participation: totalParticipation / games
	        }
	    };
	}

	function createIcon(val, lo, hi)
	{
	    var src = "@Url.Content("~/Images/neutral.png")";
	    if (val <= lo)
	    {
	        src = "@Url.Content("~/Images/bad.png")";
	    }
	    if (val >= hi)
	    {
	        src = "@Url.Content("~/Images/good.png")";
	    }
	    var img = document.createElement("img");
	    img.setAttribute("src", src);
	    //img.setAttribute("width", 32);
	    //img.setAttribute("height", 32);
	    img.className = "icon-pic";
	    return img;
	}

	function createSpan(txt)
    {
	    var span = document.createElement("span");
	    span.innerHTML = txt;
	    return span;
	}
</script>